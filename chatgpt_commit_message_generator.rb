# frozen_string_literal: true

require 'bundler/inline'

gemfile do
  source 'https://rubygems.org'
  gem 'clipboard', require: true
  gem 'colorize', require: true
  gem 'ruby-openai', require: false
  gem 'pry', require: true
  gem 'tty-prompt', require: true
end

require 'json'
require 'openai'
require 'ostruct'
require 'time'

prompt = TTY::Prompt.new

OPENAI_API_KEY = ENV['OPENAI_API_KEY']
if OPENAI_API_KEY.nil?
  puts 'Please set OPENAI_API_KEY environment variable'.red
  exit 1
end

OpenAI.configure do |config|
  config.access_token = OPENAI_API_KEY
end

# Check if changes have been staged
staged_content = `git --no-pager diff --staged --unified=1`
if staged_content.empty?
  puts 'No changes have been staged. Please stage changes before running this script.'.red
  exit 1
end

# Start timer
start_time = Time.now

# Initialize OpenAI API client
puts "\n--------------------------------------------------------------------------------".white
print 'Initializing OpenAI API client...'.white
client = OpenAI::Client.new
print '✓'.green

question = <<~QUESTION
  I need you to create a commit message for me based on these guidelines:

  - Use the past tense for the commit message.
  - Include a subject line and a body with a list of more details.
  - The subject line should be followed by a blank line
  - The subject line should be a single line that is 50 characters or less.
  - If the changes only include 1 file, then the subject line should include the file name.
  - The body should use bullets if appropriate.
  - The lines in the body should wrap at 72 characters
  - Add a blank line followed by "Commit message created with help from ChatGPT." to the end of the body
  - Don't output anything except the commit message contents so I can easily copy and paste it.

  Here are the differences for the commit:
  ```#{staged_content}```
QUESTION

print "\nSubmitting request...".white

response = client.chat(
  parameters: {
    model: 'gpt-3.5-turbo',
    messages: [{ role: 'user', content: question }],
    temperature: 0.25
  }
)
print "✓\n".green
message = response['choices'][0]['message']['content']
Clipboard.copy(message)

# End timer and display summary
end_time = Time.now
elapsed_time = end_time - start_time
time_message = "\nTime to get message from ChatGPT: #{elapsed_time.round(2)} seconds"
puts time_message.yellow
puts "\nThe commit message has been copied to your clipboard and is displayed below".magenta
puts "\nCommit message generated by ChatGPT:\n".white
puts message.cyan
puts "\n--------------------------------------------------------------------------------".white

begin
  user_input = prompt.select("\nWhat would you like to do?") do |menu|
    menu.enum '.'

    menu.choice 'Submit commit with this message', 1
    menu.choice 'Edit message before committing', 2
    menu.choice 'Exit without committing', 3
  end
rescue SystemExit, Interrupt
  # Ctrl-C or Ctrl-D
  puts "\nExiting without committing...".yellow
  exit 1
end

escaped_message = message.gsub('"', '\"')
case user_input
when 1
  puts "\nSubmitting commit...".white
  system("git commit -m \"#{escaped_message}\"")
when 2
  puts "\nOpening editor...".white
  system("git commit -e -m \"#{escaped_message}\"")
when 3
  puts "\nExiting without committing...".yellow
  exit 1
end
